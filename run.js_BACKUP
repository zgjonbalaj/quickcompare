const SitemapGenerator = require('sitemap-generator');
const prompt           = require('prompt');
const fs               = require('fs');
const path             = require('path');

var schema = {
  properties: {
    devSite: {
      description: 'Enter the URL of the development site',
      type: 'string',
      pattern: '^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$',
      required: true
    },
    proSite: {
      description: 'Enter the URL of the production site',
      type: 'string',
      pattern: '^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$',
      required: true
    }
  }
};

prompt.start();

prompt.get(schema, function(err, result) {
  for (var site in schema.properties) {
    
    var generator = SitemapGenerator(result[site], {
      stripQuerystring: true,
      filepath: path.join(process.cwd(), site + '.xml')
    });
		
		generator.on('done', (stats) => {
			console.log('[COMPLETED]');
		  console.log(stats);
		});

		generator.on('error', (error) => {
			console.log('[ERROR]');
		  console.log(error);
		});

		generator.on('ignore', (url) => {
			console.log('[NOTICE]');
		  console.log(url);
		});

    generator.start();
  }
});

// var casper = require('casper').create(),
//   baseUrl = "http://www.bbc.co.uk/",
//   screenshotFolder = 'screenshots',
//   links = [
//     '', // an empty string means the home page
//     'news/business-23643700' // if you have more levels it would be something like /chapter1/errata/
//   ],
//   breakpoints = [
//     320,
//     768,
//     992,
//     1170
//   ];

// casper.start();

// function nameFile(link, breakpoint) {
//   var name;
//   if (link === '') {
//     name = 'home';
//   } else {
//     name = link;
//   }
//   return screenshotFolder + '/' + name.replace(/\//g, '_') + breakpoint + '.png';
// }

// links.forEach(function(link) {
//   casper.thenOpen(baseUrl + link, function() {
//     breakpoints.forEach(function(breakpoint) {
//       casper.viewport(breakpoint, 800).capture(nameFile(link, breakpoint), {
//         top: 0,
//         left: 0,
//         width: breakpoint,
//         height: casper.evaluate(function() {
//           return document.body.scrollHeight;
//         })
//       });
//     });
//   });
// });

// casper.run();